# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
version: 2.1
orbs:
  docker: circleci/docker@1.6.0
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.12.0
  
jobs:
  build:
    docker:
      - image: python:3.7.3-stretch
      
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
                

  test_lint:
    docker:
      - image: python:3.7.3-stretch
      
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
            # run lints!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            # Install hadolint
              wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
              chmod +x /bin/hadolint
            make lint
  build-and-push-docker-image:
    docker:
      - image: docker:17.05.0-ce-git
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build application Docker image
          command: |
            docker build --tag=oluseyi01/udacitycapstone .
            docker image ls
            docker login -u oluseyi01 -p $DOCKER_PASSWORD
            docker push oluseyi01/udacitycapstone

  deploy-app-svc-eks:
    docker:
      - image: amazon/aws-cli
      
    working_directory: ~/repo
    
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            echo "installing dependencies"
            apt-get -y -qq update
            apt-get -y install sudo
            echo "sudo installed"
            sudo apt-get -y install curl gnupg2 software-properties-common unzip less git dos2unix
            echo "curl installed"
            # install AWS CLI
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            
            # Install kubectl
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            echo "kubectl installed"
            
            # Install eksctl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            echo "eksctl installed"

      - run:
          name: Install AWS EKS cluster
          command: |
            export TERM=xterm
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
            aws cloudformation list-exports > cluster.txt
            cat cluster.txt
            if [ $(grep -i "eksctl-udacitycapstone-eks" cluster.txt | wc -l) -ge 1 ]
              then
              echo "already EKS Cluster exists in environment"
              else
              echo "creating the EKS Cluster"
              eksctl create cluster --name $ENVIRONMENT_NAME-eks --version 1.19 --region $AWS_DEFAULT_REGION --nodegroup-name $ENVIRONMENT_NAME-node --node-type t3.large --nodes-min 2 --nodes-max 4 --managed
            fi
      - run:
          name: Update Kube cluster
          command: |
            export TERM=xterm
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
            aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name $ENVIRONMENT_NAME-eks
            kubectl apply -f mydeployment.yml
            kubectl get deployment
            kubectl get nodes -o wide
            kubectl get pods -o wide
            kubectl get all               
           

workflows:
  my_workflow:
    jobs:
      - build
      - test_lint:
          requires: [build]
      - build-and-push-docker-image:
          requires: [test_lint]            
      - deploy-app-svc-eks:
          requires: [build-and-push-docker-image]
